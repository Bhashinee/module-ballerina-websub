/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply from: "$rootDir/gradle/mvnPublisher.gradle"

description = 'Ballerina - Websub Ballerina Generator'

configurations {
    balTools
    websubBallerinaBirDir
    websubBallerinaJar
    enternalJars
}

dependencies {
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':websub-native')
    compile group: 'org.ballerinalang', name: 'toml-parser', version: '1.2.2'
    enternalJars (group: 'io.netty', name: 'netty-common', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-buffer', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-transport', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-resolver', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-handler', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-codec-http', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-codec', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-handler-proxy', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-codec-http2', version: '4.1.39.Final') {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: '2.0.25.Final') {
        transitive = false
    }
    enternalJars (group: 'org.wso2.transport.http', name: 'org.wso2.transport.http.netty', version: '6.3.8') {
        transitive = false
    }

    enternalJars (group: 'io.ballerina.messaging', name: 'broker-common', version: '0.970.0') {
        transitive = false
    }
    enternalJars (group: 'io.ballerina.messaging', name: 'broker-core', version: '0.970.5') {
        transitive = false
    }
    enternalJars (group: 'io.ballerina.messaging', name: 'broker-auth', version: '0.970.0') {
        transitive = false
    }
    enternalJars (group: 'io.ballerina.messaging', name: 'broker-rest-runner', version: '0.970.0') {
        transitive = false
    }
    enternalJars (group: 'io.ballerina.messaging', name: 'broker-coordination', version: '0.970.0') {
        transitive = false
    }

    enternalJars (group: 'commons-pool.wso2', name: 'commons-pool', version: '1.5.6.wso2v1') {
        transitive = false
    }
    enternalJars (group: 'org.wso2.orbit.org.yaml', name: 'snakeyaml', version: '1.16.0.wso2v1') {
        transitive = false
    }
    enternalJars (group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.61') {
        transitive = false
    }
    enternalJars (group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.61') {
        transitive = false
    }
    enternalJars (group: 'com.google.guava', name: 'guava', version: '19.0') {
        transitive = false
    }

    enternalJars (group: 'org.wso2.carbon.metrics', name: 'org.wso2.carbon.metrics.core', version: '2.3.7') {
        transitive = false
    }
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.enternalJars
}

task unzip {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
}

def artifactWebsubBallerinaBirDir = file("$project.projectDir/target/caches/bir_cache/")
def artifactWebsubBallerinaJar = file("$project.projectDir/target/caches/jar_cache/ballerina/websub/ballerina.websub.jar")
def balSockerJar =  file("$project.projectDir/build/libs/ballerina-websub-${ballerinaLangVersion}.jar")

task ballerinaBuild {
    dependsOn unzip
    dependsOn copyToLib
    inputs.dir file(project.projectDir)
    doLast {
        def distributionBinPath =  project.projectDir.absolutePath + "/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bin"
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat test --all -- --b7a.config.file=src/websub_advanced_integration_tests/tests/advanced_services/sample-users.toml --test.hub.url=https://localhost:23191/websub/hub"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina test --all -- --b7a.config.file=src/websub_advanced_integration_tests/tests/advanced_services/sample-users.toml --test.hub.url=https://localhost:23191/websub/hub"
            }
        }
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat build --skip-tests --all -"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina build --skip-tests --all"
            }
        }
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat build --code-coverage -c -a"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina doc -a "
            }
        }
        copy {
            // Copying the jar from ballerina build
            from "$project.projectDir/target/caches/jar_cache/ballerina/websub/ballerina-websub-.jar"
            into "$project.projectDir/target/caches/jar_cache/ballerina/websub/"
            rename { String fileName ->
                fileName.replace("ballerina-websub-.jar", artifactWebsubBallerinaJar.getName())
            }
        }
        // Copy the BIR to the 0.0.0 folder within it
        ant.move file: "${artifactWebsubBallerinaBirDir}/ballerina/websub/websub.bir",
                todir: "${artifactWebsubBallerinaBirDir}/ballerina/websub/0.0.0/"
        copy {
            // Copy the TOML to the same folder as the BIR
            from file("$project.projectDir/Ballerina.toml")
            into file("${artifactWebsubBallerinaBirDir}/ballerina/websub/0.0.0")
        }

        copy {
            from "$project.projectDir/build/libs/websub-generator-${ballerinaLangVersion}.jar"
            into "$project.projectDir/build/libs/"
            rename { String fileName ->
                fileName.replace("websub-generator-${ballerinaLangVersion}.jar", balSockerJar.getName())
            }
        }
    }
    outputs.dir artifactWebsubBallerinaBirDir
    outputs.file artifactWebsubBallerinaJar
}

artifacts {

    websubBallerinaBirDir file: artifactWebsubBallerinaBirDir, builtBy: ballerinaBuild
    websubBallerinaJar file: artifactWebsubBallerinaJar, builtBy: ballerinaBuild

}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
}
ballerinaBuild.dependsOn ":websub-native:build"
build.dependsOn ballerinaBuild
