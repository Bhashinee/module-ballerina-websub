/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply from: "$rootDir/gradle/mvnPublisher.gradle"

description = 'Ballerina - Websub Ballerina Generator'

configurations {
    balTools
    websubBallerinaBirDir
    websubBallerinaJar
    enternalJars
}

dependencies {
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':websub-native')
    compile group: 'org.ballerinalang', name: 'toml-parser', version: "${ballerinaTomlParserVersion}"
    enternalJars (group: 'io.netty', name: 'netty-common', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-buffer', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-transport', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-resolver', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-handler', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-codec-http', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-codec', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-handler-proxy', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-codec-http2', version: "${nettyVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: "${nettyTcnativeVersion}") {
        transitive = false
    }
    enternalJars (group: 'org.wso2.transport.http', name: 'org.wso2.transport.http.netty', version: "${wso2TransportHttpNettyVersion}") {
        transitive = false
    }

    enternalJars (group: 'io.ballerina.messaging', name: 'broker-common', version: "${ballerinaMessageBrokerVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.ballerina.messaging', name: 'broker-core', version: "${ballerinaMessageBrokerCoreVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.ballerina.messaging', name: 'broker-auth', version: "${ballerinaMessageBrokerVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.ballerina.messaging', name: 'broker-rest-runner', version: "${ballerinaMessageBrokerVersion}") {
        transitive = false
    }
    enternalJars (group: 'io.ballerina.messaging', name: 'broker-coordination', version: "${ballerinaMessageBrokerVersion}") {
        transitive = false
    }

    enternalJars (group: 'commons-pool.wso2', name: 'commons-pool', version: "${wso2CommonsPoolVersion}") {
        transitive = false
    }
    enternalJars (group: 'org.wso2.orbit.org.yaml', name: 'snakeyaml', version: "${wso2SnakeYamlVersion}") {
        transitive = false
    }
    enternalJars (group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: "${bouncycastleVersion}") {
        transitive = false
    }
    enternalJars (group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: "${bouncycastleVersion}") {
        transitive = false
    }
    enternalJars (group: 'com.google.guava', name: 'guava', version: "${guavaVersion}") {
        transitive = false
    }

    enternalJars (group: 'org.wso2.carbon.metrics', name: 'org.wso2.carbon.metrics.core', version: "${wso2CarbonMetricsVersion}") {
        transitive = false
    }
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.enternalJars
}

task unzip {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
}

def moduleName = "websub"
def moduleOrg = "ballerina"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def tomlVersion = project.version.split("-")[0]
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def targetBallerinaJar = file("$project.projectDir/target/caches/jar_cache/${moduleOrg}/${moduleName}/${tomlVersion}/${moduleOrg}-${moduleName}-${tomlVersion}.jar")

task ballerinaBuild {
    dependsOn unzip
    dependsOn copyToLib
    inputs.dir file(project.projectDir)
    doLast {
        def originalConfig = ballerinaConfigFile.text
        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaConfigFile.text = newConfig

        def distributionBinPath =  project.projectDir.absolutePath + "/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bin"

        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat test --all -- --b7a.config.file=src/websub_advanced_integration_tests/tests/advanced_services/sample-users.toml --test.hub.url=https://localhost:23191/websub/hub"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina test --all -- --b7a.config.file=src/websub_advanced_integration_tests/tests/advanced_services/sample-users.toml --test.hub.url=https://localhost:23191/websub/hub"
            }
        }
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat build --skip-tests --code-coverage -c ${moduleName}"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina build --skip-tests --code-coverage -c ${moduleName}"
            }
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/bir/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/target/caches/bir_cache")
            into file("$artifactCacheParent/caches/bir")
        }
        copy {
            from file("$project.projectDir/target/balo")
            into file("$artifactCacheParent/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from targetBallerinaJar
            into file("$artifactCacheParent/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
        }

        copy {
            from targetBallerinaJar
            into file("$artifactLibParent/libs")
        }

        // Publish to central
        if (!project.version.endsWith('-SNAPSHOT') && ballerinaCentralAccessToken != null && project.hasProperty("publishToCentral")) {
            println("Publishing to the ballerina central..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat --skip-tests push ${moduleName}"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/ballerina --skip-tests push ${moduleName}"
                }
            }

        }
        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat doc ${moduleName}"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina doc ${moduleName}"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${moduleName}")
            into file("$project.projectDir/build/docs_parent/docs/${moduleName}")
        }
        ballerinaConfigFile.text = originalConfig
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-websub")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

ballerinaBuild.dependsOn ":websub-native:build"
build.dependsOn ballerinaBuild
